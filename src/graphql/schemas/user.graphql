extend type Query {
	myUser: User
	user(where: UserWhereUniqueInput!): User
	users(
		where: UserWhereInput = {}
		orderBy: [UserOrderByInput!] = [{ createdAt: "desc" }]
		take: Int = 10
		skip: Int = 0
	): [User!]!
	usersCount(where: UserWhereInput = {}): Int
}

extend type Mutation {
	createUser(data: UserCreateInput!): User
	updateMyUser(data: MyUserUpdateInput!): User
	updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
	deleteUser(where: UserWhereUniqueInput!): User
}

enum UserRole {
	DEFAULT
	ADMIN
}

type User {
	id: ID!

	name: String!
	email: String!
	role: UserRole!

	createdAt: Date!
	updatedAt: Date!
}

input UserWhereUniqueInput {
	id: ID
	email: String
}

input UserRoleNullableFilter {
	equals: UserRole
	in: [UserRole!]
	notIn: [UserRole!]
}

input UserWhereInput {
	AND: [UserWhereInput!]
	OR: [UserWhereInput!]
	NOT: [UserWhereInput!]
	id: IDFilter
	name: StringNullableFilter
	email: StringNullableFilter
	role: UserRoleNullableFilter
}

input UserCreateInput {
	name: String!
	email: String!
	password: Password!
	role: UserRole
}

input UserUpdateInput {
	name: String
	email: String
	password: Password
	role: UserRole
}

input MyUserUpdateInput {
	name: String
	email: String
}

input UserOrderByInput {
	id: OrderDirection
	name: OrderDirection
	email: OrderDirection
	role: OrderDirection

	createdAt: OrderDirection
}
