extend type Query {
	Me: User
	User(id: ID!): User
	allUsers(paginate: Paginate, sort: Sort, filter: UserFilter): [User!]!
	_allUsersCount(filter: UserFilter): Int!
}

extend type Mutation {
	createUser(name: String!, email: String!, password: String!, role: UserRole): User!

	updateUser(id: ID!, name: String, email: String, password: String, role: UserRole): User
	updateMe(name: String, email: String): User

	deleteUser(id: ID!): User
}

enum UserRole {
	DEFAULT
	ADMIN
}

type User {
	id: ID!

	name: String!
	email: String!
	role: UserRole!

	createdAt: Date!
	updatedAt: Date!
}

input UserFilter {
	name: String
	email: String
	role: UserRole
}
